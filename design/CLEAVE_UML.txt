title CLEAVE

participantgroup #lightgreen **Client**
participant Sensor
control "Plant" as sim
participant Actuator
end

participantgroup #lightblue **Backend**
participant Controller
end


loop #yellow simulation step
note over sim: Wake up from sleep.
space
activate sim
sim -> sim: preActuateHook()
activate sim
space
deactivate sim
space -4
sim -> sim: actuate()
activate sim
sim -> Actuator:getActuationCommand()

space -5
note right of Actuator:Fetch the actuation command from the\nactuator. Whether that command represents\na single, complex command, or one in a \nseries of smaller subcommands is left to \nthe implementation.
space -6.5

Actuator --> sim:nextActuationCmd
note over sim: Actuation is applied here.
space
deactivate sim
space -4
sim -> sim:preSimulateHook()
activate sim
space 
deactivate sim
space -4
sim->sim: simulate()
activate sim
note over sim: Actual physical simulation\ntime step happens here.
space
deactivate sim
space -4
sim -> sim:postSimulateHook()
activate sim
space 
deactivate sim
space -4
sim -> sim: sampleSystemState()
activate sim
sim->Sensor:updateState()
deactivate sim
deactivate sim
space -5
note left of Sensor: State is pushed\nasynchronously\nto the sensor.
note over sim: Go to sleep until next simulation step.
end


loop #4c32a8 Sensing loop
note over Sensor:Wake up from sleep.
space 0.1
activate Sensor
note over Sensor: Apply potential distor-\ntion or transformation\nto stored state.

Sensor ->(3) Controller: transformedSystemState
activate Controller
deactivate Sensor
space -5
note over Sensor: Sleep until next\nsampling interval.
end

note over Controller: Calculate the actuation command.
space 
Controller ->(3) Actuator: actCmd
deactivate Controller
activate Actuator
note over Actuator:Processes the incoming actuation\ncommand and internally stores it\nuntil the plant requests at the \nnext simulation timestep.
space 0.5
deactivate Actuator


